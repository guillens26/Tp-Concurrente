package model;

import model.Work.Operation;

/** This class represents a fixed width vector of floating point numbers. */
public class ConcurVector extends Thread{

	
	// An array with the vector elements
	private double[] elements;
	private int threads;
	private int load;
	private int dimension;
	private Acum bag = new Acum();
	private Admin admin;
	private Worker[] workers;
	
	/** Constructor for a ConcurVector.
	 * @param size, the width of the vector.
	 * @precondition size > 0. */
	public ConcurVector(int size, int nThreads, int nDifElemnts) {
		elements = new double[size];
		threads = nThreads;
		load = nDifElemnts;
		admin= new Admin(size);
		workers = new Worker[nThreads];
		
		for (int i = 0; i < nThreads; ++i){
			Worker worker= new Worker(this.bag);
			this.workers[i]= worker;
			worker.run();
		}
	}
	
	public double[] getElements() {
		return elements;
	}


	public void setElements(double[] elements) {
		this.elements = elements;
	}
	
	/** Returns the dimension of this vector, that is, its width. */
	public synchronized  int dimension() {
		return elements.length;
	}
	
	public synchronized int getThreads(){
		return threads;
	}
	
	public synchronized  int getLoad() {
		return load;
	}


	public synchronized  void setLoad(int difElemnts) {
		this.load = difElemnts;
	}
	
	
	/** Returns the element at position i.
	 * @param i, the position of the element to be returned.
	 * @precondition 0 <= i < dimension(). */
	public synchronized  double get(int i) {
		return elements[i];
	}
	
	
	/** Assigns the value d to the position i of this vector. 
	 * @param i, the position to be set.
	 * @param d, the value to assign at i.
	 * @precondition 0 <= i < dimension. */
	public synchronized  void set(int i, double d) {
		elements[i] = d;
	}
	
	
	/** Assigns the value d to every position of this vector. 
	 * @param d, the value to assigned. */
	public synchronized  void set(double d) {
		for (int i = 0; i < dimension(); ++i)
			elements[i] = d;
	}
	
	
	/** Copies the values from another vector into this vector.
	 * @param v, a vector from which values are to be copied.
	 * @precondition dimension() == v.dimension(). */
	public synchronized  void assign(ConcurVector v) {
		for (int i = 0; i < dimension(); ++i)
			set(i, v.get(i));
	}
	
	
	/** Copies the values from another vector into this vector
	 * if a it has a corresponding positive mask.
	 * @param mask, a vector of conditions that indicate whether an element has to be copied or not.
	 * @param v, a vector from which values are to be copied.
	 * @precondition dimension() == mask.dimension() && dimension() == v.dimension(). */
	public synchronized void assign(ConcurVector mask, ConcurVector v) {
		for (int i = 0; i < dimension(); ++i)
			if (mask.get(i) >= 0)
				set(i, v.get(i));
	}
	
	
	/** Applies the absolute value operation to every element in this vector. 
	 * @throws InterruptedException */
	public synchronized void absOriginal() throws InterruptedException {
		for (int i = 0; i < dimension(); ++i){
			set(i, Math.abs(get(i)));
			this.admin.update();
		}	
	}
	
	public synchronized void abs() throws InterruptedException {
		Work w = new Work(Operation.ABS,this,null,null,0);
		this.bag.addWork(w);
		this.admin.waiting();
	}	
	
	/** Adds the elements of this vector with the values of another (element-wise).
	 * @param v, a vector from which to get the second operands.
	 * @precondition dimension() == v.dimension(). */
	public synchronized void add(ConcurVector v) {
		for (int i = 0; i < dimension(); ++i)
			set(i, get(i) + v.get(i));
	}
	
	
	/** Subtracts from the elements of this vector the values of another (element-wise).
	 * @param v, a vector from which to get the second operands.
	 * @precondition dimension() == v.dimension(). */
	public void sub(ConcurVector v) {
		for (int i = 0; i < dimension(); ++i)
			set(i, get(i) - v.get(i));
	}
	
	
	/** Multiplies the elements of this vector by the values of another (element-wise).
	 * @param v, a vector from which to get the second operands.
	 * @precondition dimension() == v.dimension(). */
	public void mul(ConcurVector v) {
		for (int i = 0; i < dimension(); ++i)
			set(i, get(i) * v.get(i));
	}
	
	
	/** Divides the elements of this vector by the values of another (element-wise).
	 * @param v, a vector from which to get the second operands.
	 * @precondition dimension() == v.dimension(). */
	public void div(ConcurVector v) {
		for (int i = 0; i < dimension(); ++i)
			set(i, get(i) / v.get(i));
	}
	
	
	/** Returns the sum of all the elements in this vector. 
	 * @throws InterruptedException */
	public double sum(){
		double result = 0;
		for (int i = 0; i < dimension(); ++i){
			result += get(i);
		}
		
	}
	
	
	/** Returns the dot product between two vectors (this and v).
	 * @param v, second operand of the dot product operation.
	 * @throws InterruptedException 
	 * @precondition dimension() == v.dimension(). */
	public double prod(ConcurVector v) throws InterruptedException {
		ConcurVector aux = new ConcurVector(dimension(),2,2);
		aux.assign(this);
		aux.mul(v);
		return aux.sum();
	}
	
	
	/** Returns the norm of this vector. 
	 * @throws InterruptedException */
	public double norm() throws InterruptedException {
		ConcurVector aux = new ConcurVector(dimension(),2,2);
		aux.assign(this);
		aux.mul(this);
		return Math.sqrt(aux.sum());
	}
	
	
	/** Normalizes this vector, converting it into a unit vector. 
	 * @throws InterruptedException */
	public void normalize() throws InterruptedException {
		ConcurVector aux = new ConcurVector(dimension(),2,2);
		aux.set(this.norm());
		div(aux);
	}
	
	
	/** Applies the max operation element-wise.
	 * @param v, a vector with the second operands for max.
	 * @precondition dimension == v.dimension(). */
	public void max(ConcurVector v) {
		for (int i = 0; i < dimension(); ++i)
			set(i, Math.max(get(i), v.get(i)));
	}
	
	
	/** Applies the min operation element-wise.
	 * @param v, a vector with the second operands for min.
	 * @precondition dimension == v.dimension(). */
	public void min(ConcurVector v) {
		for (int i = 0; i < dimension(); ++i)
			set(i, Math.min(get(i), v.get(i)));
	}

	
}
